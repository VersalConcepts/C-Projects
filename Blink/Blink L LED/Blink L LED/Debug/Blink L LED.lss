
Blink L LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000003f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000430  00000820  00020430  2**2
                  ALLOC
  3 .stack        00002004  2000044c  0000083c  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003c0e  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f2  00000000  00000000  000240bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000243b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  000243f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00024461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010ccb  00000000  00000000  000244a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000143d  00000000  00000000  0003516c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006952b  00000000  00000000  000365a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001a4  00000000  00000000  0009fad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002450 	.word	0x20002450
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000115 	.word	0x00000115
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
	...
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000430 	.word	0x20000430
  d4:	00000000 	.word	0x00000000
  d8:	000003f0 	.word	0x000003f0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000434 	.word	0x20000434
 108:	000003f0 	.word	0x000003f0
 10c:	000003f0 	.word	0x000003f0
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
 11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
 124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
 12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
 136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
 156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17c:	39fd      	subs	r1, #253	; 0xfd
 17e:	2390      	movs	r3, #144	; 0x90
 180:	005b      	lsls	r3, r3, #1
 182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
 184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
 188:	78c3      	ldrb	r3, [r0, #3]
 18a:	2403      	movs	r4, #3
 18c:	43a3      	bics	r3, r4
 18e:	2202      	movs	r2, #2
 190:	4313      	orrs	r3, r2
 192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 194:	78c3      	ldrb	r3, [r0, #3]
 196:	260c      	movs	r6, #12
 198:	43b3      	bics	r3, r6
 19a:	2108      	movs	r1, #8
 19c:	430b      	orrs	r3, r1
 19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
 1a2:	7b98      	ldrb	r0, [r3, #14]
 1a4:	2530      	movs	r5, #48	; 0x30
 1a6:	43a8      	bics	r0, r5
 1a8:	0005      	movs	r5, r0
 1aa:	2020      	movs	r0, #32
 1ac:	4328      	orrs	r0, r5
 1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1b0:	7b98      	ldrb	r0, [r3, #14]
 1b2:	43b0      	bics	r0, r6
 1b4:	4301      	orrs	r1, r0
 1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b8:	7b99      	ldrb	r1, [r3, #14]
 1ba:	43a1      	bics	r1, r4
 1bc:	430a      	orrs	r2, r1
 1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
 1c2:	6851      	ldr	r1, [r2, #4]
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	430b      	orrs	r3, r1
 1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
 1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
 1d0:	4798      	blx	r3
 1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
 1d4:	20000000 	.word	0x20000000
 1d8:	000003f0 	.word	0x000003f0
 1dc:	20000430 	.word	0x20000430
 1e0:	2000044c 	.word	0x2000044c
 1e4:	20000430 	.word	0x20000430
 1e8:	20000004 	.word	0x20000004
 1ec:	20000434 	.word	0x20000434
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	00000000 	.word	0x00000000
 1f8:	41007000 	.word	0x41007000
 1fc:	41005000 	.word	0x41005000
 200:	41004800 	.word	0x41004800
 204:	41004000 	.word	0x41004000
 208:	0000024d 	.word	0x0000024d
 20c:	00000221 	.word	0x00000221

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
 212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
 214:	601a      	str	r2, [r3, #0]
	return;
}
 216:	4770      	bx	lr
 218:	000f4240 	.word	0x000f4240
 21c:	20000000 	.word	0x20000000

00000220 <main>:
#include "sam.h"


int main(void)
{
 220:	b510      	push	{r4, lr}
	/* Initialize the SAM system */
	SystemInit();
 222:	4b06      	ldr	r3, [pc, #24]	; (23c <main+0x1c>)
 224:	4798      	blx	r3
	/* Replace with your application code */
	
	REG_PORT_DIRSET0 = PORT_PA17;       // define portA 17 as output
 226:	2280      	movs	r2, #128	; 0x80
 228:	0292      	lsls	r2, r2, #10
 22a:	4b05      	ldr	r3, [pc, #20]	; (240 <main+0x20>)
 22c:	601a      	str	r2, [r3, #0]
	int    i;
	
	while (1)
	{
//		for (i=0 ; i<150000 ; i++) ;                              // wait
		REG_PORT_OUTSET0 = PORT_PA17;     // Switch the output to 1 or HIGH
 22e:	4905      	ldr	r1, [pc, #20]	; (244 <main+0x24>)
 230:	0013      	movs	r3, r2
//		for (i=0 ; i<150000 ; i++) ;                              // wait
		REG_PORT_OUTCLR0 = PORT_PA17;     // Switch the output to 0 or LOW
 232:	4a05      	ldr	r2, [pc, #20]	; (248 <main+0x28>)
	int    i;
	
	while (1)
	{
//		for (i=0 ; i<150000 ; i++) ;                              // wait
		REG_PORT_OUTSET0 = PORT_PA17;     // Switch the output to 1 or HIGH
 234:	600b      	str	r3, [r1, #0]
//		for (i=0 ; i<150000 ; i++) ;                              // wait
		REG_PORT_OUTCLR0 = PORT_PA17;     // Switch the output to 0 or LOW
 236:	6013      	str	r3, [r2, #0]
 238:	e7fc      	b.n	234 <main+0x14>
 23a:	46c0      	nop			; (mov r8, r8)
 23c:	00000211 	.word	0x00000211
 240:	41004408 	.word	0x41004408
 244:	41004418 	.word	0x41004418
 248:	41004414 	.word	0x41004414

0000024c <__libc_init_array>:
 24c:	b570      	push	{r4, r5, r6, lr}
 24e:	4e0d      	ldr	r6, [pc, #52]	; (284 <__libc_init_array+0x38>)
 250:	4d0d      	ldr	r5, [pc, #52]	; (288 <__libc_init_array+0x3c>)
 252:	2400      	movs	r4, #0
 254:	1bad      	subs	r5, r5, r6
 256:	10ad      	asrs	r5, r5, #2
 258:	d005      	beq.n	266 <__libc_init_array+0x1a>
 25a:	00a3      	lsls	r3, r4, #2
 25c:	58f3      	ldr	r3, [r6, r3]
 25e:	3401      	adds	r4, #1
 260:	4798      	blx	r3
 262:	42a5      	cmp	r5, r4
 264:	d1f9      	bne.n	25a <__libc_init_array+0xe>
 266:	f000 f8b1 	bl	3cc <_init>
 26a:	4e08      	ldr	r6, [pc, #32]	; (28c <__libc_init_array+0x40>)
 26c:	4d08      	ldr	r5, [pc, #32]	; (290 <__libc_init_array+0x44>)
 26e:	2400      	movs	r4, #0
 270:	1bad      	subs	r5, r5, r6
 272:	10ad      	asrs	r5, r5, #2
 274:	d005      	beq.n	282 <__libc_init_array+0x36>
 276:	00a3      	lsls	r3, r4, #2
 278:	58f3      	ldr	r3, [r6, r3]
 27a:	3401      	adds	r4, #1
 27c:	4798      	blx	r3
 27e:	42a5      	cmp	r5, r4
 280:	d1f9      	bne.n	276 <__libc_init_array+0x2a>
 282:	bd70      	pop	{r4, r5, r6, pc}
 284:	000003d8 	.word	0x000003d8
 288:	000003d8 	.word	0x000003d8
 28c:	000003d8 	.word	0x000003d8
 290:	000003e0 	.word	0x000003e0

00000294 <register_fini>:
 294:	4b03      	ldr	r3, [pc, #12]	; (2a4 <register_fini+0x10>)
 296:	b510      	push	{r4, lr}
 298:	2b00      	cmp	r3, #0
 29a:	d002      	beq.n	2a2 <register_fini+0xe>
 29c:	4802      	ldr	r0, [pc, #8]	; (2a8 <register_fini+0x14>)
 29e:	f000 f805 	bl	2ac <atexit>
 2a2:	bd10      	pop	{r4, pc}
 2a4:	00000000 	.word	0x00000000
 2a8:	000002bd 	.word	0x000002bd

000002ac <atexit>:
 2ac:	b510      	push	{r4, lr}
 2ae:	0001      	movs	r1, r0
 2b0:	2300      	movs	r3, #0
 2b2:	2200      	movs	r2, #0
 2b4:	2000      	movs	r0, #0
 2b6:	f000 f81b 	bl	2f0 <__register_exitproc>
 2ba:	bd10      	pop	{r4, pc}

000002bc <__libc_fini_array>:
 2bc:	b570      	push	{r4, r5, r6, lr}
 2be:	4b09      	ldr	r3, [pc, #36]	; (2e4 <__libc_fini_array+0x28>)
 2c0:	4c09      	ldr	r4, [pc, #36]	; (2e8 <__libc_fini_array+0x2c>)
 2c2:	1ae4      	subs	r4, r4, r3
 2c4:	10a4      	asrs	r4, r4, #2
 2c6:	d009      	beq.n	2dc <__libc_fini_array+0x20>
 2c8:	4a08      	ldr	r2, [pc, #32]	; (2ec <__libc_fini_array+0x30>)
 2ca:	18a5      	adds	r5, r4, r2
 2cc:	00ad      	lsls	r5, r5, #2
 2ce:	18ed      	adds	r5, r5, r3
 2d0:	682b      	ldr	r3, [r5, #0]
 2d2:	3c01      	subs	r4, #1
 2d4:	4798      	blx	r3
 2d6:	3d04      	subs	r5, #4
 2d8:	2c00      	cmp	r4, #0
 2da:	d1f9      	bne.n	2d0 <__libc_fini_array+0x14>
 2dc:	f000 f880 	bl	3e0 <_fini>
 2e0:	bd70      	pop	{r4, r5, r6, pc}
 2e2:	46c0      	nop			; (mov r8, r8)
 2e4:	000003ec 	.word	0x000003ec
 2e8:	000003f0 	.word	0x000003f0
 2ec:	3fffffff 	.word	0x3fffffff

000002f0 <__register_exitproc>:
 2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2f2:	4644      	mov	r4, r8
 2f4:	465f      	mov	r7, fp
 2f6:	4656      	mov	r6, sl
 2f8:	464d      	mov	r5, r9
 2fa:	469b      	mov	fp, r3
 2fc:	4b2f      	ldr	r3, [pc, #188]	; (3bc <__register_exitproc+0xcc>)
 2fe:	b4f0      	push	{r4, r5, r6, r7}
 300:	681c      	ldr	r4, [r3, #0]
 302:	23a4      	movs	r3, #164	; 0xa4
 304:	005b      	lsls	r3, r3, #1
 306:	0005      	movs	r5, r0
 308:	58e0      	ldr	r0, [r4, r3]
 30a:	000e      	movs	r6, r1
 30c:	4690      	mov	r8, r2
 30e:	2800      	cmp	r0, #0
 310:	d04b      	beq.n	3aa <__register_exitproc+0xba>
 312:	6843      	ldr	r3, [r0, #4]
 314:	2b1f      	cmp	r3, #31
 316:	dc0d      	bgt.n	334 <__register_exitproc+0x44>
 318:	1c5c      	adds	r4, r3, #1
 31a:	2d00      	cmp	r5, #0
 31c:	d121      	bne.n	362 <__register_exitproc+0x72>
 31e:	3302      	adds	r3, #2
 320:	009b      	lsls	r3, r3, #2
 322:	6044      	str	r4, [r0, #4]
 324:	501e      	str	r6, [r3, r0]
 326:	2000      	movs	r0, #0
 328:	bc3c      	pop	{r2, r3, r4, r5}
 32a:	4690      	mov	r8, r2
 32c:	4699      	mov	r9, r3
 32e:	46a2      	mov	sl, r4
 330:	46ab      	mov	fp, r5
 332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 334:	4b22      	ldr	r3, [pc, #136]	; (3c0 <__register_exitproc+0xd0>)
 336:	2b00      	cmp	r3, #0
 338:	d03c      	beq.n	3b4 <__register_exitproc+0xc4>
 33a:	20c8      	movs	r0, #200	; 0xc8
 33c:	0040      	lsls	r0, r0, #1
 33e:	e000      	b.n	342 <__register_exitproc+0x52>
 340:	bf00      	nop
 342:	2800      	cmp	r0, #0
 344:	d036      	beq.n	3b4 <__register_exitproc+0xc4>
 346:	22a4      	movs	r2, #164	; 0xa4
 348:	2300      	movs	r3, #0
 34a:	0052      	lsls	r2, r2, #1
 34c:	58a1      	ldr	r1, [r4, r2]
 34e:	6043      	str	r3, [r0, #4]
 350:	6001      	str	r1, [r0, #0]
 352:	50a0      	str	r0, [r4, r2]
 354:	3240      	adds	r2, #64	; 0x40
 356:	5083      	str	r3, [r0, r2]
 358:	3204      	adds	r2, #4
 35a:	5083      	str	r3, [r0, r2]
 35c:	2401      	movs	r4, #1
 35e:	2d00      	cmp	r5, #0
 360:	d0dd      	beq.n	31e <__register_exitproc+0x2e>
 362:	009a      	lsls	r2, r3, #2
 364:	4691      	mov	r9, r2
 366:	4481      	add	r9, r0
 368:	4642      	mov	r2, r8
 36a:	2188      	movs	r1, #136	; 0x88
 36c:	464f      	mov	r7, r9
 36e:	507a      	str	r2, [r7, r1]
 370:	22c4      	movs	r2, #196	; 0xc4
 372:	0052      	lsls	r2, r2, #1
 374:	4690      	mov	r8, r2
 376:	4480      	add	r8, r0
 378:	4642      	mov	r2, r8
 37a:	3987      	subs	r1, #135	; 0x87
 37c:	4099      	lsls	r1, r3
 37e:	6812      	ldr	r2, [r2, #0]
 380:	468a      	mov	sl, r1
 382:	430a      	orrs	r2, r1
 384:	4694      	mov	ip, r2
 386:	4642      	mov	r2, r8
 388:	4661      	mov	r1, ip
 38a:	6011      	str	r1, [r2, #0]
 38c:	2284      	movs	r2, #132	; 0x84
 38e:	4649      	mov	r1, r9
 390:	465f      	mov	r7, fp
 392:	0052      	lsls	r2, r2, #1
 394:	508f      	str	r7, [r1, r2]
 396:	2d02      	cmp	r5, #2
 398:	d1c1      	bne.n	31e <__register_exitproc+0x2e>
 39a:	0002      	movs	r2, r0
 39c:	4655      	mov	r5, sl
 39e:	328d      	adds	r2, #141	; 0x8d
 3a0:	32ff      	adds	r2, #255	; 0xff
 3a2:	6811      	ldr	r1, [r2, #0]
 3a4:	430d      	orrs	r5, r1
 3a6:	6015      	str	r5, [r2, #0]
 3a8:	e7b9      	b.n	31e <__register_exitproc+0x2e>
 3aa:	0020      	movs	r0, r4
 3ac:	304d      	adds	r0, #77	; 0x4d
 3ae:	30ff      	adds	r0, #255	; 0xff
 3b0:	50e0      	str	r0, [r4, r3]
 3b2:	e7ae      	b.n	312 <__register_exitproc+0x22>
 3b4:	2001      	movs	r0, #1
 3b6:	4240      	negs	r0, r0
 3b8:	e7b6      	b.n	328 <__register_exitproc+0x38>
 3ba:	46c0      	nop			; (mov r8, r8)
 3bc:	000003c8 	.word	0x000003c8
 3c0:	00000000 	.word	0x00000000
 3c4:	00000043 	.word	0x00000043

000003c8 <_global_impure_ptr>:
 3c8:	20000008                                ... 

000003cc <_init>:
 3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3ce:	46c0      	nop			; (mov r8, r8)
 3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3d2:	bc08      	pop	{r3}
 3d4:	469e      	mov	lr, r3
 3d6:	4770      	bx	lr

000003d8 <__init_array_start>:
 3d8:	00000295 	.word	0x00000295

000003dc <__frame_dummy_init_array_entry>:
 3dc:	000000dd                                ....

000003e0 <_fini>:
 3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3e2:	46c0      	nop			; (mov r8, r8)
 3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3e6:	bc08      	pop	{r3}
 3e8:	469e      	mov	lr, r3
 3ea:	4770      	bx	lr

000003ec <__fini_array_start>:
 3ec:	000000b5 	.word	0x000000b5
